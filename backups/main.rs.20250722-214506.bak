
mod config;

use clap::Parser;
use projectm::core::ProjectM;
use sdl2::event::{Event, WindowEvent};
use sdl2::keyboard::Keycode;
use sdl2::pixels::Color;
use sdl2::rect::Rect;
use sdl2::render::{Canvas, Texture, TextureCreator};
use sdl2::video::{GLProfile, Window};
use std::path::PathBuf;

use crate::config::Config;

#[derive(Parser, Debug)]
#[command(version)]
struct Args {
    #[arg(short, long)]
    config_path: Option<PathBuf>,
}

struct App {
    projectm: ProjectM,
    sdl_context: sdl2::Sdl,
    canvas: Canvas<Window>,
    texture_creator: TextureCreator<sdl2::video::WindowContext>,
    _ttf_context: sdl2::ttf::Sdl2TtfContext,
    font_path: PathBuf,
    _gl_context: sdl2::video::GLContext,
    event_pump: sdl2::EventPump,
    config: Config,
}

impl App {
    fn new(config: Config) -> Result<Self, String> {
        let sdl_context = sdl2::init()?;
        let video_subsystem = sdl_context.video()?;
        let ttf_context = sdl2::ttf::init().map_err(|e| e.to_string())?;

        let gl_attr = video_subsystem.gl_attr();
        gl_attr.set_context_profile(GLProfile::Core);
        gl_attr.set_context_version(3, 3);

        let window = video_subsystem
            .window("Music Visualizer", config.width, config.height)
            .opengl()
            .resizable()
            .build()
            .map_err(|e| e.to_string())?;

        let _gl_context = window.gl_create_context()?;
        // unsafe {
        //     glow::Context::from_loader_function(|s| video_subsystem.gl_get_proc_address(s) as *const _);
        // }

        let projectm = ProjectM::create();
        projectm.set_window_size(config.width as usize, config.height as usize);

        let event_pump = sdl_context.event_pump()?;
        // let canvas = window.into_canvas().build().map_err(|e| e.to_string())?;
        // let texture_creator = canvas.texture_creator();

        Ok(Self {
            projectm,
            sdl_context,
            // canvas,
            // texture_creator,
            _ttf_context: ttf_context,
            font_path: PathBuf::from("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"),
            _gl_context,
            event_pump,
            config,
        })
    }

    fn run(&mut self) -> Result<(), String> {
        // let font = self._ttf_context.load_font(&self.font_path, 28)?;
        'running: loop {
            for event in self.event_pump.poll_iter() {
                match event {
                    Event::Quit { .. }
                    | Event::KeyDown {
                        keycode: Some(Keycode::Escape),
                        ..
                    } => break 'running,
                    Event::Window {
                        win_event: WindowEvent::Resized(width, height),
                        ..
                    } => {
                        self.projectm.set_window_size(width as usize, height as usize);
                    }
                    _ => {}
                }
            }

            // self.projectm.render_frame();

            // self.canvas.clear();
            // // This is where we would render the FBO texture.
            // // For now, we'll just render some text.
            // let surface = font
            //     .render("Hello, world!")
            //     .blended(Color::RGBA(255, 255, 255, 255))
            //     .map_err(|e| e.to_string())?;
            // let texture = self
            //     .texture_creator
            //     .create_texture_from_surface(&surface)
            //     .map_err(|e| e.to_string())?;
            // self.canvas.copy(&texture, None, Some(Rect::new(10, 10, 200, 50)))?;
            // self.canvas.present();
        }
        Ok(())
    }
}

fn main() -> Result<(), String> {
    let args = Args::parse();

    // For now, we'll just use a default config.
    // In the future, we can load from the path in `args.config_path`.
    let config = Config {
        width: 800,
        height: 600,
        preset_path: PathBuf::from("/usr/share/projectM/presets/"),
        texture_path: PathBuf::from(""),
        frame_rate: 60,
        preset_duration: 10.0,
        beat_sensitivity: 1.0,
    };

    let mut app = App::new(config)?;
    app.run()
}
